<?php require_once 'table3.php';  class dbase { private $m_db;       private $m_auxpath;  private $m_dbfname;  private $m_dbfile;   private $m_error;    private $m_varcount;  private $m_arSrcHash = array(); private $m_idSrcHash = 0; private $m_arVarHash = array(); private $m_idVarHash = 0;  private $m_pageInsert; private $m_idSrc;  private $m_sDest;  private $m_idCurr;  private $m_idPrev;  private $m_idNext;  private $m_idVar0;  private $m_idFilter;  private $m_sDestBp;  private $m_iSeedAs; private $m_iNextAs; private $m_iStepAs; private $m_iSiloIndex;  private $m_varsetInsert; private $m_varsetId = 0;  private $m_varsetNum;  private $m_varsetVarId;   private $m_varInsert; private $m_varId; private $m_varValue;  private $m_wpitemInsert; private $m_sSrc; private $m_sTitle; private $m_sSlug; private $m_sCategory; private $m_sParent; private $m_sPath1; private $m_sSpin;  public function __construct($auxpath, $dbfname) { $this->m_auxpath = $auxpath; $this->m_dbfname = $dbfname; $this->m_dbfile  = "$auxpath/$dbfname"; }  public function getError() { return $this->m_error; }  public function getVarValue($vid) { $xXcb167X9 = $this->m_db->querySingle("SELECT value FROM var WHERE id='$vid'"); return ($xXcb167X9[0] == '{')? '{spintax}' : $xXcb167X9; }   public function openWrite($yb1d40XxF, $lowurl_yn = 0, $siloDepth) { $this->m_varcount = $yb1d40XxF; $retstat = true; if(file_exists($this->m_dbfile)) unlink($this->m_dbfile); switch($this->m_dbfname) { case 'xml.db': case 'unbuild.db': $this->m_db = new SQLite3($this->m_dbfile); $this->m_db->exec('pragma synchronous = off;'); $this->m_db->exec('BEGIN TRANSACTION;'); yXfx2dX23($this->m_db, $this->m_varcount, $lowurl_yn, $siloDepth); $this->m_db->exec('COMMIT;'); $this->m_db->exec('BEGIN TRANSACTION;'); $this->m_pageInsert = $this->m_db->prepare("INSERT INTO page (dest) VALUES (:dest)" ); $this->m_pageInsert->bindParam(':dest', $this->m_sDest); break;  case 'bh.db': case 'bt.db': case 'rh.db': case 'rt.db': $this->m_db = new SQLite3($this->m_dbfile); $this->m_db->exec('pragma synchronous = off;'); $this->m_db->exec('BEGIN TRANSACTION;'); yXfx2dX23($this->m_db, $this->m_varcount, $lowurl_yn, $siloDepth); $this->m_db->exec('COMMIT;'); $this->m_db->exec('BEGIN TRANSACTION;'); $this->m_pageInsert = $this->m_db->prepare("INSERT INTO page (src, dest, curr_var, prev_var, next_var, varz_id, filter_id, dest_bp, seed_as, next_as, step_as, silo_index) VALUES (:src, :dest, :curr, :prev, :next, :var0, :filter_id, :destbp, :seedas, :nextas, :stepas, :siloindex )" ); $this->m_pageInsert->bindParam(':src',  $this->m_idSrc); $this->m_pageInsert->bindParam(':dest', $this->m_sDest); $this->m_pageInsert->bindParam(':curr', $this->m_idCurr); $this->m_pageInsert->bindParam(':prev', $this->m_idPrev); $this->m_pageInsert->bindParam(':next', $this->m_idNext); $this->m_pageInsert->bindParam(':var0', $this->m_idVar0); $this->m_pageInsert->bindParam(':filter_id', $this->m_idFilter); $this->m_pageInsert->bindParam(':destbp', $this->m_sDestBp); $this->m_pageInsert->bindParam(':seedas', $this->m_iSeedAs); $this->m_pageInsert->bindParam(':nextas', $this->m_iNextAs); $this->m_pageInsert->bindParam(':stepas', $this->m_iStepAs); $this->m_pageInsert->bindParam(':siloindex', $this->m_iSiloIndex);  $this->m_varsetInsert = $this->m_db->prepare("INSERT INTO varset (id, num, var_id) VALUES (:id, :num, :var_id)"); $this->m_varsetInsert->bindParam(':id', $this->m_varsetId);   $this->m_varsetInsert->bindParam(':num', $this->m_varsetNum); $this->m_varsetInsert->bindParam(':var_id', $this->m_varsetVarId); $this->m_varInsert = $this->m_db->prepare( "INSERT INTO var (id, value) VALUES (:id, :value)" ); $this->m_varInsert->bindParam(':id', $this->m_varId); $this->m_varInsert->bindParam(':value', $this->m_varValue); $this->m_varValue = ''; $this->m_varId = ++$this->m_idVarHash; $this->m_arVarHash[$this->m_varValue] = $this->m_varId; $this->m_varInsert->execute(); $this->m_wpitemInsert = $this->m_db->prepare("INSERT INTO wpitem (src, title, slug, category, parent, path1, spin) VALUES (:wsrc, :wtitle, :wslug, :wcategory, :wparent, :wpath1, :wspin)"); $this->m_wpitemInsert->bindParam(':wsrc', $this->m_sSrc); $this->m_wpitemInsert->bindParam(':wtitle', $this->m_sTitle); $this->m_wpitemInsert->bindParam(':wslug', $this->m_sSlug); $this->m_wpitemInsert->bindParam(':wcategory', $this->m_sCategory); $this->m_wpitemInsert->bindParam(':wparent', $this->m_sParent); $this->m_wpitemInsert->bindParam(':wpath1', $this->m_sPath1); $this->m_wpitemInsert->bindParam(':wspin', $this->m_sSpin); break;  default: $retstat = false; $this->m_error = 'invalid db filename ('.$this->m_dbfname.')'; break; } return $retstat; }    public function writeDest($sDest) { $this->m_sDest = $sDest;         $this->m_pageInsert->execute(); return true; }    public function writeWpItem($wpi) { $ar = json_decode($wpi, true); $this->m_sSrc   = $ar['source']; $this->m_sTitle = $ar['title']; $this->m_sSlug  = $ar['slug']; $this->m_sCategory  = $ar['category']; $this->m_sParent = $ar['parent']; $this->m_sPath1  = $ar['path1']; $this->m_sSpin   = $ar['spin']; $this->m_wpitemInsert->execute(); return true; }    public function writePageRow($sSrc, $sDest, $iCurr, $iPrev, $iNext, $iVar0, $iFilter, $sDestBp, $iSiloIndex, $iSeedAs = 0, $iNextAs = 0, $iStepAs = 0, $vfolder = 0) { $retstat = true; if( array_key_exists($sSrc, $this->m_arSrcHash) ) { $this->m_idSrc = $this->m_arSrcHash[$sSrc]; } else { $this->m_arSrcHash[$sSrc] = ++$this->m_idSrcHash; $this->m_idSrc = $this->m_idSrcHash; if($vfolder == 0) $fn = $this->m_auxpath.'/tmp/'.$sSrc; else $fn = dirname($this->m_auxpath).'/mpc_short_files/v/'.$vfolder.'/'.$sSrc; $this->m_db->exec( "INSERT INTO source (id, path) VALUES ('$this->m_idSrc', '$fn')" ); }  $this->m_sDest = $sDest;         $this->m_idCurr = $iCurr;         $this->m_idPrev = $iPrev;         $this->m_idNext = $iNext;         $this->m_idVar0 = $iVar0;         $this->m_idFilter = $iFilter;         $this->m_sDestBp = $sDestBp;         $this->m_iSeedAs = $iSeedAs;         $this->m_iNextAs = $iNextAs;         $this->m_iStepAs = $iStepAs;         $this->m_iSiloIndex = $iSiloIndex;          $this->m_pageInsert->execute();  return $retstat; }   public function writeVarsetRow($str10) { $xAC063X21 = explode("\t", $str10); $this->m_varsetId++; $this->m_varsetNum = 0;  for($x=0;$x<$this->m_varcount;$x++) { $this->m_varValue = $xAC063X21[$x]; if( array_key_exists($this->m_varValue, $this->m_arVarHash) ) { $this->m_varId = $this->m_arVarHash[$this->m_varValue]; } else { $this->m_arVarHash[$this->m_varValue] = ++$this->m_idVarHash; $this->m_varId = $this->m_idVarHash; $this->m_varInsert->execute(); } $this->m_varsetVarId = $this->m_varId; $this->m_varsetInsert->execute(); if($this->m_varsetNum == 0) $xC6E168XE = $this->m_varId; $this->m_varsetNum++; } return $xC6E168XE; }   public function dumpXmlPages($firstPage, $lastPage, $x9Ba196Xc, $file, $PERPAGE = 1000) { $this->m_db = new SQLite3($this->m_dbfile);  $id1 = $firstPage * $PERPAGE; if($id1 == 0) $id1 = 1; $id2 = ($lastPage * $PERPAGE) + ($PERPAGE-1);  if(! is_dir("$this->m_auxpath/tmp")) mkdir("$this->m_auxpath/tmp", 0777, true); $x6614XE05 = fopen("$this->m_auxpath/tmp/$file", 'w');  $xXcb167X9 = $this->m_db->query("SELECT id, dest FROM page WHERE id >= '$id1' AND id <= '$id2' ORDER BY id");  while($row = $xXcb167X9->fetchArray(SQLITE3_ASSOC)) { fwrite($x6614XE05, '<url><loc>'.$x9Ba196Xc.$row['dest'].'</loc></url>'."\n"); } fclose($x6614XE05); $this->m_db->close(); return true; }   public function dumpAllXmlPages($x9Ba196Xc, $file, $maxlines) { $this->m_db = new SQLite3($this->m_dbfile);  $xXcb167X9 = $this->m_db->query("SELECT id, dest FROM page ORDER BY id"); if(! is_dir("$this->m_auxpath/tmp")) mkdir("$this->m_auxpath/tmp", 0777, true);  $files_written = 0; $lines_written = 0;  while($row = $xXcb167X9->fetchArray(SQLITE3_ASSOC)) { if($lines_written == 0) { $files_written++; $x6614XE05 = fopen("$this->m_auxpath/tmp/$file$files_written", 'w'); } fwrite($x6614XE05, '<url><loc>'.$x9Ba196Xc.$row['dest'].'</loc></url>'."\n"); $lines_written++; if($lines_written < $maxlines) continue;  fclose($x6614XE05); $lines_written = 0; } if($x6614XE05) fclose($x6614XE05); $this->m_db->close(); return $files_written; }   public function dumpUnbuild($file) { $this->m_db = new SQLite3($this->m_dbfile);  $xXcb167X9 = $this->m_db->query("SELECT dest FROM page ORDER BY id DESC"); if(! is_dir("$this->m_auxpath/tmp")) mkdir("$this->m_auxpath/tmp", 0777, true); $x6614XE05 = fopen("$this->m_auxpath/tmp/$file", 'w');  while($row = $xXcb167X9->fetchArray(SQLITE3_ASSOC)) { fwrite($x6614XE05, $row['dest']."\n"); } fclose($x6614XE05); $this->m_db->close(); return true; }   public function dumpBpPagesH($firstPage, $lastPage, $file, $PERPAGE = 1000) { $this->m_db = new SQLite3($this->m_dbfile);  $id1 = $firstPage * $PERPAGE; if($id1 == 0) $id1 = 1; $id2 = ($lastPage * $PERPAGE) + ($PERPAGE-1);  if(! is_dir("$this->m_auxpath/tmp")) mkdir("$this->m_auxpath/tmp", 0777, true); $x6614XE05 = fopen("$this->m_auxpath/tmp/$file", 'w');  $result_psd = $this->m_db->query("SELECT id, dest_bp, curr_var FROM page WHERE id >= '$id1' AND id <= '$id2' ORDER BY id"); $iLegend = 0; while($row_psd = $result_psd->fetchArray(SQLITE3_ASSOC)) { $fline = $row_psd['dest_bp']; if( (strpos($fline, '//') !== false) || (substr($fline, -2) == '_#') ) $iLegend = 1; $result_vid = $this->m_db->query("SELECT var_id FROM varset WHERE id='$row_psd[id]' ORDER BY num"); while($row_vid = $result_vid->fetchArray(SQLITE3_ASSOC)) { $fline .= "\t".$row_vid['var_id']; }                 fwrite($x6614XE05, "$fline\n"); } fclose($x6614XE05);  $xXcb167X9 = $this->m_db->query("SELECT varcount FROM info"); $row = $xXcb167X9->fetchArray(SQLITE3_ASSOC); $vc = $row['varcount']; return '{"varcount":'.$vc.',"iLegend":'.$iLegend.'}'; }   public function dumpBpPagesT($firstPage, $lastPage, $file, $PERPAGE = 1000) { $this->m_db = new SQLite3($this->m_dbfile);  $id1 = $firstPage * $PERPAGE; if($id1 == 0) $id1 = 1; $id2 = ($lastPage * $PERPAGE) + ($PERPAGE-1);  if(! is_dir("$this->m_auxpath/tmp")) mkdir("$this->m_auxpath/tmp", 0777, true); $x6614XE05 = fopen("$this->m_auxpath/tmp/$file", 'w');  $result_wpi = $this->m_db->query("SELECT id, src, title, slug, spin, category, parent, path1 FROM wpitem WHERE id >= '$id1' AND id <= '$id2' ORDER BY id");  while($row_wpi = $result_wpi->fetchArray(SQLITE3_ASSOC)) { $fline = $row_wpi['src']."\t".$row_wpi['title']."\t".$row_wpi['slug']."\t".$row_wpi['spin']."\t".$row_wpi['category']."\t".$row_wpi['parent']."\t".$row_wpi['path1']; $result_vid = $this->m_db->query("SELECT var_id FROM varset WHERE id='$row_wpi[id]' ORDER BY num"); while($row_vid = $result_vid->fetchArray(SQLITE3_ASSOC)) { $fline .= "\t".$row_vid['var_id']; }                 fwrite($x6614XE05, "$fline\n"); } fclose($x6614XE05);  $xXcb167X9 = $this->m_db->query("SELECT varcount FROM info"); $row = $xXcb167X9->fetchArray(SQLITE3_ASSOC); $vc = $row['varcount']; return '{"varcount":'.$vc.',"iLegend":0}'; }   public function doQuery($xaFD162Xd) { $this->m_db->exec($xaFD162Xd); return true; }   public function close($bCommit = false) { if(isset($this->m_db)) { if($bCommit) $this->m_db->exec('COMMIT;'); $this->m_db->close(); } }  } ?>